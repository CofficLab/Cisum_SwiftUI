---
globs: .swift
alwaysApply: false
---

# Swift 通用代码规范

## 类和结构体注释规范

### 类注释模板

```swift
/**
 * 详细描述这个类的功能和职责
 */
class ClassName {
    // 类实现
}
```

### 结构体注释模板

```swift
/**
 * 用途：详细描述这个结构体的功能和用途
 * 属性说明：
 *   - property1: 属性1的用途说明
 *   - property2: 属性2的用途说明
 * 使用场景：描述在什么情况下使用这个结构体
 */
struct StructName {
    // 结构体实现
}
```

### 注释要求

- 每个 `class` 和 `struct` 的顶部都必须添加规范的注释
- 注释必须清楚说明用途、功能、职责
- 对于复杂的类，建议添加属性说明和使用场景
- 注释使用 `/** */` 格式，便于生成文档

## 成员变量访问控制规范

### 默认访问级别

- **成员变量默认使用 `private` 访问级别**
- 只有在确实需要外部访问时才使用 `internal` 或 `public`
- 遵循"最小权限原则"

### 访问级别使用指南

```swift
class ExampleClass {
    // 私有成员变量 - 默认
    private var internalState: String = ""
    private var configuration: Config = Config()
    
    // 内部访问 - 仅在模块内可访问
    internal var sharedData: Data?
    
    // 公共接口 - 对外暴露的方法
    public func publicMethod() {
        // 实现
    }
    
    // 私有方法 - 内部实现细节
    private func internalHelper() {
        // 实现
    }
}
```

### 何时使用不同的访问级别

- **`private`**：内部实现细节，不需要外部访问
- **`fileprivate`**：同一文件内可访问
- **`internal`**：同一模块内可访问（默认）
- **`public`**：外部模块可访问
- **`open`**：外部模块可访问且可继承（仅类）

## 代码组织规范

### 属性声明顺序

```swift
class ExampleClass {
    // 1. 静态属性
    static let shared = ExampleClass()
    
    // 2. 常量属性
    private let maxRetryCount = 3
    
    // 3. 变量属性
    private var currentState: State = .idle
    
    // 4. 计算属性
    private var isReady: Bool {
        return currentState == .ready
    }
    
    // 5. 初始化方法
    init() {
        // 初始化代码
    }
    
    // 6. 公共方法
    public func start() {
        // 实现
    }
    
    // 7. 私有方法
    private func setup() {
        // 实现
    }
}
```

### 方法组织原则

- 公共接口方法放在前面
- 私有实现方法放在后面
- 相关功能的方法放在一起
- 使用 MARK 注释分组（可选）

## 命名规范

### 类型命名

- 类名：使用 `PascalCase`，如 `UserManager`
- 结构体名：使用 `PascalCase`，如 `UserInfo`
- 枚举名：使用 `PascalCase`，如 `UserStatus`

### 属性命名

- 变量名：使用 `camelCase`，如 `userName`
- 常量名：使用 `camelCase`，如 `maxCount`
- 布尔属性：使用 `is`、`has`、`can` 前缀，如 `isEnabled`

### 方法命名

- 方法名：使用 `camelCase`，如 `fetchUserData()`
- 动词开头，清楚表达动作
- 避免缩写，使用完整单词

## 错误处理规范

### 使用 Result 类型

```swift
func fetchData() -> Result<Data, NetworkError> {
    // 实现
}
```

### 使用 throws 关键字

```swift
func processData() throws -> Data {
    // 实现
}
```

### 错误类型定义

```swift
enum NetworkError: Error {
    case invalidURL
    case noData
    case decodingFailed
}
```

## 性能优化规范

### 内存管理

- 使用 `weak` 避免循环引用
- 使用 `unowned` 时确保引用对象不会为 nil
- 及时释放不需要的资源

### 集合操作

- 使用 `lazy` 延迟计算
- 避免在循环中创建临时对象
- 合理使用 `map`、`filter`、`reduce`

## 测试规范

### 单元测试

- 每个公共方法都应该有对应的测试
- 测试覆盖正常情况和边界情况
- 使用描述性的测试方法名

### 测试示例

```swift
class ExampleClassTests: XCTestCase {
    func testPublicMethod_WithValidInput_ShouldReturnExpectedResult() {
        // 测试实现
    }
}
```

## 文档规范

### 代码注释

- 复杂逻辑必须添加注释
- 注释说明"为什么"而不是"是什么"
- 及时更新注释，保持与代码同步

### API 文档

- 公共接口必须添加文档注释
- 使用 `///` 或 `/** */` 格式
- 包含参数说明、返回值说明、使用示例

